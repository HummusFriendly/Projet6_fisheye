ok 1) Finir le code + css (ajd)
ok 2) Restructurer le code (ajd):

photographer.html
index.html

pages/photographer.js
pages/index.js
pages/contactForm.js

templates/templatePhotographer.js
templates/templateImage.js
templates/templateVideo.js
ok templates/lightBox.js

ok MediaFactory.js le if dans media factory, si image return si video return

Dans fetch.js async function getPhotographers() dans fichier api.js

3) Accessibilité + consol.log (données du modal)

Envoyer message à Flo
Guide mentor :

Portée du projet 
Ce projet vise à faire en sorte que les élèves s'inspirent de ce qu'ils ont appris en JavaScript, HTML et CSS pour créer un front end qui comprend de multiples pages et types d'interactions. 

 

L'ajout d'exigences d'accessibilité les amène également à réfléchir à la manière dont différents types d'utilisateurs utiliseront leur page.

 

Les étudiants recevront un fichier JSON qui imite la façon dont les données pourraient être extraites d'une base de données pour simuler l'intégration du backend.

 

Recommandations
Encouragez les élèves à utiliser le VSCode comme IDE. C'est un logiciel gratuit, open-source et multi-plateforme.  

 

Concernant la version de JavaScript :  L'utilisation de la version la plus récente de JavaScript peut entraîner des problèmes sur certains navigateurs. Par conséquent, les étudiants sont autorisés à packager leur code avec webpack. Ils peuvent également utiliser Babel pour packager leur code (pour s'assurer qu'il est compatible avec un large éventail de navigateurs).  

 

Pour les étudiants souhaitant utiliser des frameworks ou librairies du type React.js, Angular, Vue.js ou jQuery, ce n'est pas conseillé, à moins que l'étudiant soit déjà très à l'aise avec JavaScript. Cependant, ils sont autorisés, tant que cela n'empêche pas l'étudiant de faire les activités évaluées dans les critères d'évaluation par lui-même.

 

Pour les étudiants qui souhaitent aller au-delà des exigences du projet en matière d'accessibilité et de maintenabilité du code, demandez-leur :

d'utiliser des linters pour le HTML et le CSS également ;
de faire en sorte que leur code HTML et CSS respecte le guide de style Google HTML/CSS ;
de consulter le guide MDN sur l'accessibilité pour améliorer leur compréhension de l'accessibilité. 
 
Critères d’évaluation 
Barres titres
 

Développer une application modulaire avec des modèles de conception
Le code peut être validé si :

❒ Aucun bug n'est rencontré.

❒ Aucune erreur n'est affichée dans la console.  

❒ Le pattern Factory est utilisé pour générer différents éléments de DOM pour les vidéos ou les photos.

❒ Le DOM est généré via du JavaScript basé sur le fichier JSON fourni, au lieu d'être écrit à la main.

❒ Il comprend tous les photographes et les images fournies. 

❒ Les pages des photographes sont générées en utilisant un unique fichier HTML.

❒ Le design correspond aux maquettes.

 
Écrire du code JavaScript maintenable
❒ Le code passe les tests ESLint par défaut. (Remarque : les étudiants sont autorisés à faire taire certains avertissements ESLint s'ils peuvent le justifier durant la soutenance).

❒ Le code est bien commenté, ce qui signifie que toute intention qui ne peut être immédiatement comprise en regardant le code lui-même peut être comprise en lisant les commentaires.

❒ Les identificateurs tels que les noms de classe, de méthode et de variable décrivent leur but avec exactitude et précision.

❒ Les versions récentes de JavaScript sont utilisées sans caractéristiques dépréciées.

 
Assurer l'accessibilité d'un site web
❒ Des éléments HTML pertinents et spécifiques sont choisis (ex. : <nav>, <article> au lieu d'utiliser <div> et <span> pour tout).

❒ Les balises ARIA sont utilisées pour décrire des éléments personnalisés.

❒ Les balises d'accessibilité passent le test AChecker sans "known issues".

❒ Le site est navigable avec un clavier.

❒ La lightbox est navigable avec un clavier.

❒ Le site fournit un texte alternatif pour toutes les images et vidéos afin de garantir l'accessibilité aux lecteurs d'écran. 

 
Gérer les évènements du site 
❒ Les event listeners sont utilisés pour répondre à toutes les interactions au clavier ou à la souris.

❒ Lorsque l'utilisateur clique sur la vignette d'un photographe sur la page d'accueil, il est amené sur une page spécifique à ce photographe.

❒ Lorsque l'utilisateur clique sur l'icône "like" sur la page du photographe, il incrémente le nombre de "like". 

❒ Les médias peuvent être triés par popularité, date ou titre en cliquant sur le filtre de tri souhaité. 

❒ Lorsque l'utilisateur clique sur un élément média sur la page du photographe, l’élément est affiché dans une modale type lightbox.

❒ La lightbox peut être fermée en cliquant sur une croix dans le coin. 

❒ La lightbox présente des boutons de navigation sur le côté pour passer d'un média à un autre (les utilisateurs peuvent cliquer sur ces boutons pour naviguer).

❒ Un bouton de contact cliquable sur la page du photographe lance une modale, qui comprend des champs pour le nom, l'e-mail et le message.

❒ L'envoi du formulaire (via le bouton Envoyer) permet d’afficher le contenu des 3 champs dans la console. 

❒ La page d'accueil répertorie tous les photographes avec leur nom, leur slogan, leur lieu, leur prix/heure et une image miniature.

❒ La page de chaque photographe présente une galerie avec des photos et des vidéos.

❒ Chaque média sur la page du photographe comprend le titre et le nombre de likes.

❒ Le nombre total de photos aimées par un photographe est indiqué. 

❒ Toutes les pages demandées sont cohérentes avec les maquettes.

 

Soutenance



